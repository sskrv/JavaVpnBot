package org.example.logic;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.example.config.BotConfig;
import org.example.db.DatabaseManager;
import org.example.three_x_ui.ThreeXuiApiClient;
import org.example.yookassa.YooKassaPayment;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageReplyMarkup;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

@Service
public class BotLogic extends TelegramLongPollingBot {
    private static final Logger logger = LoggerFactory.getLogger(BotLogic.class);
    private static final BigDecimal VPN_PRICE = new BigDecimal("99.00");

    private final BotConfig botConfig;
    private final DatabaseManager dbManager;
    private final ThreeXuiApiClient threeXuiClient;
    private final YooKassaPayment yooKassaPayment;

    public BotLogic(BotConfig botConfig, ThreeXuiApiClient threeXuiClient, DatabaseManager dbManager, YooKassaPayment yooKassaPayment) {
        this.botConfig = botConfig;
        this.dbManager = dbManager;
        this.threeXuiClient = threeXuiClient;
        this.yooKassaPayment = yooKassaPayment;
        logger.info("BotLogic initialized with YooKassa payment integration and 3X-UI API client");
    }

    @Override
    public String getBotUsername() {
        return botConfig.getUsername();
    }

    @Override
    public String getBotToken() {
        return botConfig.getToken();
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            handleTextMessage(update.getMessage());
        } else if (update.hasCallbackQuery()) {
            handleCallbackQuery(update.getCallbackQuery());
        }
    }

    private void handleTextMessage(Message message) {
        long userId = message.getFrom().getId();
        String chatId = message.getChatId().toString();
        String receivedText = message.getText();
        String username = message.getFrom().getUserName();

        logger.info("Received message '{}' from user {} (username: {})", receivedText, userId, username);

        dbManager.addUser(userId);

        if ("/start".equals(receivedText)) {
            sendMainMenu(chatId);
        } else {
            SendMessage answerMessage = new SendMessage();
            answerMessage.setChatId(chatId);
            answerMessage.setText("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");
            sendMessage(answerMessage);
        }
    }

    private void handleCallbackQuery(CallbackQuery callbackQuery) {
        String callbackData = callbackQuery.getData();
        String chatId = callbackQuery.getMessage().getChatId().toString();
        long userId = callbackQuery.getFrom().getId();
        int messageId = callbackQuery.getMessage().getMessageId();
        String username = callbackQuery.getFrom().getUserName();

        logger.info("Received callback '{}' from user {}", callbackData, userId, username);

        if (callbackData.startsWith("check_payment:")) {
            String paymentId = callbackData.substring("check_payment:".length());
            checkPaymentStatus(chatId, userId, paymentId, username);
            removeInlineKeyboard(chatId, messageId);
            return;
        }

        if (callbackData.startsWith("cancel_payment:")) {
            String paymentId = callbackData.substring("cancel_payment:".length());
            cancelPayment(chatId, userId, paymentId);
            removeInlineKeyboard(chatId, messageId);
            return;
        }

        switch (callbackData) {
            case "buy_key" -> {
                handleBuyKeyRequest(chatId, userId);
                removeInlineKeyboard(chatId, messageId);
            }
            case "show_key" -> {
                handleShowExistingKey(chatId, userId);
                removeInlineKeyboard(chatId, messageId);
            }
            case "instructions" -> {
                sendInstructions(chatId);
                removeInlineKeyboard(chatId, messageId);
            }
            case "main_menu" -> {
                sendMainMenu(chatId);
                removeInlineKeyboard(chatId, messageId);
            }
            case "pay_vpn" -> {
                initiatePayment(chatId, userId);
                removeInlineKeyboard(chatId, messageId);
            }
        }
    }

    // --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –∫–Ω–æ–ø–∫–∏ ---
    private InlineKeyboardMarkup createBackToMenuKeyboard() {
        return createKeyboard(
            createButtonRow(createButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "main_menu"))
        );
    }
    private InlineKeyboardMarkup createInstructionsAndMenuKeyboard() {
        return createKeyboard(
            createButtonRow(createButton("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "instructions")),
            createButtonRow(createButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "main_menu"))
        );
    }
    private InlineKeyboardMarkup createPaymentCheckKeyboard(String paymentId) {
        return createKeyboard(
            createButtonRow(createButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", "check_payment:" + paymentId)),
            createButtonRow(createButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", "cancel_payment:" + paymentId))
        );
    }
    private InlineKeyboardButton createButton(String text, String callbackData) {
        InlineKeyboardButton button = new InlineKeyboardButton();
        button.setText(text);
        button.setCallbackData(callbackData);
        return button;
    }
    private InlineKeyboardButton createUrlButton() {
        InlineKeyboardButton button = new InlineKeyboardButton();
        button.setText("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞");
        button.setUrl("https://t.me/caucasianO5");
        return button;
    }
    private List<InlineKeyboardButton> createButtonRow(InlineKeyboardButton... buttons) {
        List<InlineKeyboardButton> row = new ArrayList<>();
        Collections.addAll(row, buttons);
        return row;
    }
    @SafeVarargs
    private InlineKeyboardMarkup createKeyboard(List<InlineKeyboardButton>... rows) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        Collections.addAll(keyboard, rows);
        markup.setKeyboard(keyboard);
        return markup;
    }

    // --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π ---
    private SendMessage createMessage(String chatId, String text, InlineKeyboardMarkup keyboard) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);
        message.setReplyMarkup(keyboard);
        return message;
    }
    private SendMessage createHtmlMessage(String chatId, String text, InlineKeyboardMarkup keyboard) {
        SendMessage message = createMessage(chatId, text, keyboard);
        message.setParseMode("HTML");
        return message;
    }
    private SendMessage createMarkdownMessage(String chatId, String text, InlineKeyboardMarkup keyboard) {
        SendMessage message = createMessage(chatId, text, keyboard);
        message.enableMarkdown(true);
        return message;
    }
    private void sendMessage(SendMessage message) {
        try {
            execute(message);
            logger.info("Message sent successfully to chat {}", message.getChatId());
        } catch (TelegramApiException e) {
            logger.error("Failed to send message to chat {}: {}", message.getChatId(), e.getMessage());
        }
    }
    private void sendErrorMessage(String chatId, String errorText) {
        sendMessage(createMessage(chatId, errorText, createBackToMenuKeyboard()));
    }
    private void sendSupportErrorMessage(String chatId, String errorText) {
        InlineKeyboardMarkup keyboard = createKeyboard(
            createButtonRow(createUrlButton()),
            createButtonRow(createButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", "main_menu"))
        );
        sendMessage(createMessage(chatId, errorText, keyboard));
    }
    private void sendCancelPaymentMessage(String chatId, String errorText) {
        sendMessage(createMessage(chatId, errorText, null));
    }
    private void removeInlineKeyboard(String chatId, int messageId) {
        EditMessageReplyMarkup editMessageReplyMarkup = new EditMessageReplyMarkup();
        editMessageReplyMarkup.setChatId(chatId);
        editMessageReplyMarkup.setMessageId(messageId);
        editMessageReplyMarkup.setReplyMarkup(new InlineKeyboardMarkup(Collections.emptyList()));
        try {
            execute(editMessageReplyMarkup);
        } catch (TelegramApiException e) {
            logger.error("Failed to remove inline keyboard for chat {}: {}", chatId, e.getMessage());
        }
    }

    // --- –õ–æ–≥–∏–∫–∞ VPN-–ø—Ä–æ–¥–∞–∂ ---

    private void sendMainMenu(String chatId) {
        InlineKeyboardMarkup keyboard = createKeyboard(
            createButtonRow(createButton("\uD83D\uDCB3 –ö—É–ø–∏—Ç—å –∫–ª—é—á", "buy_key")),
            createButtonRow(
                createButton("\uD83D\uDD11 –ú–æ–π –∫–ª—é—á", "show_key"),
                createButton("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "instructions")
            )
        );
        SendMessage message = createMessage(
            chatId,
            "\uD83C\uDF0D –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ " + botConfig.getNickname() + "! \uD83D\uDD12",
            keyboard
        );
        message.setParseMode("HTML");
        sendMessage(message);
    }

    private void handleBuyKeyRequest(String chatId, long userId) {
        String existingKey = dbManager.getVpnKey(userId);
        if (existingKey != null && !existingKey.isEmpty()) {
            showExistingKeyDetails(chatId, userId, existingKey);
        } else {
            sendPaymentOffer(chatId);
        }
    }
    private void showExistingKeyDetails(String chatId, long userId, String key) {
        String keyDate = dbManager.getKeyCreationDate(userId);
        String dateInfo = (keyDate != null) ? "\uD83D\uDDD3Ô∏è –ö–ª—é—á —Å–æ–∑–¥–∞–Ω: " + keyDate : "";
        String formattedKey = "<code>" + key + "</code>";

        String text = "\uD83D\uDD27 –í–∞—à–∞ VPN-—Å—Å—ã–ª–∫–∞:\n\n" + formattedKey +
                "\n\n" + "<i>‚¨Ü –ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å</i>" +
                "\n\n" + dateInfo + "\n" +
                "\n‚ùó –≠—Ç–∞ —Å—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 30 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è. \n\n" +
                "‚öôÔ∏è –î–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è\".";
        sendMessage(createHtmlMessage(chatId, text, createInstructionsAndMenuKeyboard()));
    }
    private void sendPaymentOffer(String chatId) {
        InlineKeyboardMarkup keyboard = createKeyboard(
            createButtonRow(createButton("–û–ø–ª–∞—Ç–∏—Ç—å " + VPN_PRICE + " —Ä—É–±.", "pay_vpn")),
            createButtonRow(createButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "main_menu"))
        );
        String text = "üí≥ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ VPN –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É –≤ —Ä–∞–∑–º–µ—Ä–µ " + VPN_PRICE + " —Ä—É–±.";
        sendMessage(createHtmlMessage(chatId, text, keyboard));
    }
    private void initiatePayment(String chatId, long userId) {
        logger.info("Initiating payment for user {}", userId);
        try {
            String description = "–û–ø–ª–∞—Ç–∞ VPN –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + userId;
            String confirmationUrl = yooKassaPayment.createPayment(VPN_PRICE, description);
            String paymentId = confirmationUrl.substring(confirmationUrl.lastIndexOf("=") + 1);

            String text = "üí≥ –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:\n\n" + confirmationUrl +
                    "\n\n‚è≥ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'";
            sendMessage(createHtmlMessage(chatId, text, createPaymentCheckKeyboard(paymentId)));
            logger.info("Payment link sent to user {}, paymentId: {}", userId, paymentId);
        } catch (Exception e) {
            logger.error("Error initiating payment for user {}: {}", userId, e.getMessage());
            sendErrorMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
     */
    private void checkPaymentStatus(String chatId, long userId, String paymentId, String username) {
        logger.info("Checking payment status for user {}, paymentId: {}", userId, paymentId);
        try {
            String status = yooKassaPayment.checkPaymentStatus(paymentId);
            logger.info("Payment status for paymentId {}: {}", paymentId, status);

            switch (status) {
                case "succeeded" -> processSuccessfulPayment(chatId, userId, username);
                case "pending" -> {
                    String text = "‚è≥ –í–∞—à –ø–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å —Å–Ω–æ–≤–∞.";
                    InlineKeyboardMarkup keyboard = createKeyboard(
                        createButtonRow(createButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", "check_payment:" + paymentId)),
                        createButtonRow(createButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", "main_menu"))
                    );
                    sendMessage(createMessage(chatId, text, keyboard));
                }
                default -> {
                    String text = "‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω. –°—Ç–∞—Ç—É—Å: " + status + ". –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.";
                    InlineKeyboardMarkup keyboard = createKeyboard(
                        createButtonRow(createButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", "buy_key")),
                        createButtonRow(createButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", "main_menu"))
                    );
                    sendMessage(createMessage(chatId, text, keyboard));
                }
            }
        } catch (Exception e) {
            logger.error("Error checking payment status for user {}: {}", userId, e.getMessage());
            sendErrorMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }
    private void cancelPayment(String chatId, long userId, String paymentId) {
        logger.info("Cancel payment for user {}, paymentId: {}", userId, paymentId);
        try {
            yooKassaPayment.cancelPayment(paymentId);
            sendCancelPaymentMessage(chatId, "\uD83D\uDCC9 –ü–ª–∞—Ç—ë–∂ –æ—Ç–º–µ–Ω—ë–Ω");
            logger.info("Payment successfully canceled for user {}, paymentId: {}", userId, paymentId);
        } catch (Exception e) {
            logger.error("Error cancel payment for user {}: {}", userId, e.getMessage());
            sendErrorMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç VPN –∫–ª—é—á (—Å–æ–∑–¥–∞—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ inbound)
     */
    private void processSuccessfulPayment(String chatId, long userId, String username) {
        logger.info("Processing successful payment for user {}", userId);

        try {
            sendMessage(createMessage(
                chatId,
                "‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞! ‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–ª—è –≤–∞—Å –¥–æ—Å—Ç—É–ø –∫ VPN...",
                null
            ));

            // –í—ã–∑—ã–≤–∞–µ–º addUser, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            String vpnLink = threeXuiClient.addUser(username);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "–û—à–∏–±–∫–∞" (—á—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø—Ä–æ–±–ª–µ–º—É)
            if (vpnLink != null && !vpnLink.startsWith("–û—à–∏–±–∫–∞")) {
                updateAndSave(chatId, userId, vpnLink);
                logger.info("VPN subscription successfully generated and sent to user {}", userId);
            } else {
                logger.error("Failed to add VPN client after successful payment, user {}: {}", userId, vpnLink);
                sendSupportErrorMessage(chatId,
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É VPN. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                );
            }
        } catch (Exception e) {
            logger.error("Error processing successful payment for user {}: {}", userId, e.getMessage());
            sendSupportErrorMessage(chatId,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            );
        }
    }

    private void updateAndSave(String chatId, long userId, String vpnLink) {
        dbManager.updateKeyCreationDate(userId);
        dbManager.saveVpnKey(userId, vpnLink);

        String formattedKey = "<code>" + vpnLink + "</code>";
        String text = "‚úÖ –í–∞—à–∞ VPN-—Å—Å—ã–ª–∫–∞ –≥–æ—Ç–æ–≤–∞:\n\n" + formattedKey +
                "\n" + "<i>‚¨Ü –ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å</i>" +
                "\n\n‚ùó –≠—Ç–∞ —Å—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π.";

        InlineKeyboardMarkup keyboard = createKeyboard(
            createButtonRow(createButton("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é", "instructions")),
            createButtonRow(createButton("‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu"))
        );

        sendMessage(createHtmlMessage(chatId, text, keyboard));
    }
    private void handleShowExistingKey(String chatId, long userId) {
        String existingKey = dbManager.getVpnKey(userId);
        if (existingKey != null && !existingKey.isEmpty()) {
            showExistingKeyDetails(chatId, userId, existingKey);
        } else {
            InlineKeyboardMarkup keyboard = createKeyboard(
                createButtonRow(createButton("üí≥ –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø", "buy_key")),
                createButtonRow(createButton("‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu"))
            );
            sendMessage(createMessage(chatId, "\uD83D\uDCC9 –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ VPN.", keyboard));
        }
    }
    private void sendInstructions(String chatId) {
        String instructions = """
    üì± *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é –∫ VPN*

    1Ô∏è‚É£ *–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ V2Box:*
    ‚ñ™Ô∏è Android: [Google Play](https://play.google.com/store/apps/details?id=com.v2ray.ang)
    ‚ñ™Ô∏è iOS: [App Store](https://apps.apple.com/app/v2box-v2ray-client/id6446814690)
    ‚ñ™Ô∏è Windows: [–°–∫–∞—á–∞—Ç—å V2rayN](https://github.com/2dust/v2rayN/releases/latest)

    2Ô∏è‚É£ *–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É:*
    ‚ñ™Ô∏è –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—É—é VPN-—Å—Å—ã–ª–∫—É
    ‚ñ™Ô∏è –û—Ç–∫—Ä–æ–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    ‚ñ™Ô∏è –ù–∞–∂–º–∏—Ç–µ –Ω–∞ + –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É
    ‚ñ™Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ "–ò–º–ø–æ—Ä—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞"
    ‚ñ™Ô∏è –ì–æ—Ç–æ–≤–æ!

    3Ô∏è‚É£ *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:*
    ‚ñ™Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
    ‚ñ™Ô∏è –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è 
    ‚ñ™Ô∏è –ì–æ—Ç–æ–≤–æ! –í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ VPN

    ‚ùì –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ [–ø–æ–¥–¥–µ—Ä–∂–∫—É](https://t.me/caucasianO5).
    """;
        sendMessage(createMarkdownMessage(chatId, instructions, createBackToMenuKeyboard()));
    }
}